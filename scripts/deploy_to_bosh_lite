#!/usr/bin/env bash
# This script is only runnable by users with access to our s3 bucket and closed source releases
# Open Source users are better off manually bosh interpolating vars-lite.yml and deployment.yml together
set -e

RELEASES_DIR=bosh_releases
S3_RELEASES_PATH=s3://london-pipelines/redis/dependent-releases/
STEMCELL_VERSION=97.3
SUPPORT_REPO_PATH=~/workspace/pcf-redis-meta
RELEASE_PATH=~/workspace/redis-service-adapter-release
BOSH_CLI=${BOSH_CLI:-bosh}
GO_SYSLOGD_DEPLOYMENT_NAME=go-syslogd-for-system-tests

main(){
    check_env_set
    clean_out_releases
    create_cf_redis_release
    download_other_releases
    upload_releases
    deploy_go_syslogd
    populate_vars_file
    create_cf_redis_manifest
    deploy
    setup_envrc_file
}

check_env_set(){
if [[ -z "${BOSH_ENVIRONMENT}" ]]; then
    printf "Exiting as no bosh environment set on env"
    exit 1
fi
}

clean_out_releases() {
    rm -rf ${RELEASES_DIR}
    mkdir ${RELEASES_DIR}
}

create_cf_redis_release() {
    ${BOSH_CLI} create-release --force
    ${BOSH_CLI} upload-release -n --rebase
}

download_other_releases() {
    declare -a releases=("redis-backups" "service-backup" "redis-metrics" "service-metrics" "loggregator-agent" "syslog" "routing" "go-syslogd" "bpm")

    echo "Validating and uploading releases"
    for release_name in "${releases[@]}"
    do
        release_file_name=$(aws s3 ls ${S3_RELEASES_PATH} | egrep ${release_name}-[0-9.]+\.tgz | sort -r | head -n 1 | perl -pe 's/^(?:\S+\s+){3}//')
        underscored_release_name=${release_name//-/_}
        local version=$([[ ${release_file_name} =~ ${release_name}-([0-9]+\.[0-9]+\.?[0-9]*).tgz ]] && echo "${BASH_REMATCH[1]}")
        eval ${underscored_release_name}_version=${version}

        set +e
        ${BOSH_CLI} releases | grep ${release_name} | grep ${version} &> /dev/null
        rc=$?; if [[ $rc != 0 ]]; then
            aws s3 cp ${S3_RELEASES_PATH}${release_file_name} ${RELEASES_DIR};
        fi
        set -e
    done
    echo "done uploading releases"
}

upload_releases() {
    ls ${RELEASES_DIR}/*.tgz | xargs -IN ${BOSH_CLI} upload-release -n N
}

create_cf_redis_manifest(){
    MANIFEST_FILE=$(mktemp)

    ${BOSH_CLI} interpolate \
    -o ~/workspace/pcf-redis-meta/pipelines/releases/cf-redis/opsvars/ops-closed-source.yml \
    -o ~/workspace/pcf-redis-meta/pipelines/tiles/common/cf-redis/ops-metrics-legacy-format.yml \
    -v service_backup_version="\"${service_backup_version}\"" \
    -v service_metrics_version="\"${service_metrics_version}\"" \
    -v redis_metrics_version="\"${redis_metrics_version}\"" \
    -v redis_backups_version="\"${redis_backups_version}\"" \
    -v routing_version="\"${routing_version}\"" \
    -v syslog_version="\"${syslog_version}\"" \
    -v bpm_version="\"${bpm_version}\"" \
    -v loggregator_agent_version="\"$([[ ${loggregator_agent_version} =~ ([0-9]+\.[0-9]+) ]] && echo "${BASH_REMATCH[1]}")\"" \
    -v stemcell_version=${STEMCELL_VERSION} \
    -v system_domain=${BOSH_LITE_DOMAIN} \
    -v apps_domain=${BOSH_LITE_DOMAIN} \
    -v director_uuid=$(${BOSH_CLI} env --column=UUID) \
    --vars-file ${VARS_CF_REDIS} \
    --vars-file ~/workspace/pcf-redis-meta/pipelines/releases/common/opsvars/vars-bosh-lite-cloud-config.yml \
    --vars-file ~/workspace/pcf-redis-meta/pipelines/releases/common/opsvars/vars-bosh-lite.yml \
    --vars-file ~/workspace/pcf-redis-meta/pipelines/tiles/common/cf-redis/vars.yml \
    ~/workspace/cf-redis-release/manifest/deployment.yml | tee ${MANIFEST_FILE}
}

deploy(){
    ${BOSH_CLI} -d cf-redis deploy ${MANIFEST_FILE} -n
}

setup_envrc_file(){
    printf -- "${BOSH_CA_CERT}" > "${BOSH_CA_CERT_FILE:=$(mktemp)}"
    printf -- "${BOSH_GW_PRIVATE_KEY_CONTENTS}" > "${BOSH_GW_PRIVATE_KEY_FILE:=$(mktemp)}"

    cat << EOF > .envrc
export SYSLOG_TEST_ENDPOINT=${SYSLOG_TEST_ENDPOINT}
export BOSH_V2_CLI=${BOSH_CLI}
export BOSH_MANIFEST=${MANIFEST_FILE}

export BOSH_CA_CERT_PATH=${BOSH_CA_CERT_FILE}
export BOSH_GW_PRIVATE_KEY=${BOSH_GW_PRIVATE_KEY_FILE}
export JUMPBOX_PRIVATE_KEY_PATH=${BOSH_GW_PRIVATE_KEY_FILE}

export JUMPBOX_HOST=${BOSH_ENVIRONMENT}
export BOSH_USERNAME=${BOSH_CLIENT}
export BOSH_PASSWORD=${BOSH_CLIENT_SECRET}
export BOSH_ENV_LOGIN="true"
export JUMPBOX_USERNAME=jumpbox

export CF_USERNAME=admin
export CF_PASSWORD=$(credhub login --skip-tls-validation &> /dev/null && credhub get -n /bosh-lite/cf/cf_admin_password | grep value | cut -d ' ' -f2)
export CF_API="https://api.$BOSH_LITE_DOMAIN"
export DOPPLER_ADDR="wss://doppler.$BOSH_LITE_DOMAIN"
EOF
}

deploy_go_syslogd(){
    ${BOSH_CLI} -d ${GO_SYSLOGD_DEPLOYMENT_NAME} deploy \
    -v deployment-name=${GO_SYSLOGD_DEPLOYMENT_NAME} \
    -v go-syslogd-version=${go_syslogd_version} \
    -v stemcell-version=${STEMCELL_VERSION} -n \
    ~/workspace/cf-redis-release/manifest/go-syslogd.yml

    SYSLOG_TEST_ENDPOINT=$(${BOSH_CLI} -d ${GO_SYSLOGD_DEPLOYMENT_NAME} vms --column ips)
}

populate_vars_file(){
    VARS_CF_REDIS=$(mktemp)
    trap "rm -rf ${VARS_CF_REDIS}" EXIT

    cat << EOF > ${VARS_CF_REDIS}
---
deployment_name: cf-redis
broker_name: redis-broker-ci
service_name: p-redis-ci
shared_vm_plan_id: 67c41b80-c336-48f3-b519-5695edec3de1
service_id: 80cf68be-5d05-4993-9224-f364d81bc514
dedicated_vm_plan_id: 2123ff9b-b3c5-445b-8eca-d8325fd40e5c
dedicated_node_count: 3
syslog_endpoint_host: ${SYSLOG_TEST_ENDPOINT}
syslog_endpoint_port: 12350
EOF
}

main
